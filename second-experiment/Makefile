CC=clang

CFLAGS=-pedantic -Wall -std=c89 -g
LIBS=

SOURCE_FILES=$(wildcard src/*.c src/objects/*.c src/util/*.c src/stdlib/*.c)

# Resulting object files that will be tested, and the flags used to build them.
TESTED_OBJ_FILES=$(SOURCE_FILES:src/%.c=build/tested/%.o)
TESTED_CFLAGS=$(CFLAGS) -DRUNNING_TESTS -Werror

# Options defining how to build the tests themselves, which libs and flags to use.
TEST_CFLAGS=$(TESTED_CFLAGS) -I src/ -Wno-variadic-macros
TEST_LIBS=-L build/tested -lnuvm -L build/atest -latest

# Which files to use as tests and what object files they create.
TEST_SOURCE_FILES=$(wildcard tests/suites/*.c)
TEST_OBJ_FILES=$(TEST_SOURCE_FILES:tests/suites/%.c=build/tests/%.o)

# The result of building this is supposed to generated the tested library for the VM
all:build/tested/libnuvm.a


# Used for automatic header dependency tracking generated by the compiler
-include $(patsubst %.o, %.d, $(TESTED_OBJ_FILES))


# The resulting library is merely a packing of all the object files.
build/tested/libnuvm.a: $(TESTED_OBJ_FILES)
	@ar rcs build/tested/libnuvm.a $^


# This is simply a shortcut so that I can update my testing framework inside
# this other project's tree. The library 'atest' could be updated and installed
# and then only used as a dependency here, but I'm kinda developing both concurrently
build/atest/libatest.a: tests/atest/src/atest.c tests/atest/src/atest.h
	@${CC} -o build/atest.o -c tests/atest/src/atest.c ${TEST_CFLAGS}
	@ar rcs build/atest/libatest.a build/atest.o


# How to build the object files to be tested; the -MM -MT line invokes the
# compiler's automatic header file dependency tracking for object files.
build/tested/%.o: src/%.c
	@${CC} -c $< -o $@ ${TESTED_CFLAGS}
	@${CC} -MM -MT $@ $(TESTED_CFLAGS) $< > $(@:.o=.d)

# How to build the test-runner, which runs the full suite of tests upon the
# tested object files.
build/tests/runner: build/tested/libnuvm.a \
                   build/atest/libatest.a \
                   build/tests/runner.o \
                   $(TEST_OBJ_FILES)
	@${CC} -o build/tests/runner $^ ${TEST_LIBS}

# The basic entry point of the test-running code.
build/tests/runner.o: tests/runner.c
	@${CC} -c $< -o $@ ${TEST_CFLAGS}


# How to build each of the test suites.
build/tests/%.o: tests/suites/%.c
	@${CC} -c $< -o $@ ${TEST_CFLAGS}


# Auxiliary target that builds and tests everything, takes an ENV var so that
# I can sometimes say which specific test to run, instead of running the full
# battery of tests.
test: build/tests/runner
	@./build/tests/runner $(TEST)


clean:
	@rm -f build/*.a\
	       build/*.d\
	       build/*.o\
	       build/runner\
	       build/nuvm/*.a\
	       build/nuvm/*.d\
	       build/nuvm/*.o\
	       build/tested/*.a\
	       build/tested/*.d\
	       build/tested/*.o\
	       build/tested/objects/*.d\
	       build/tested/objects/*.o\
	       build/tested/util/*.d\
	       build/tested/util/*.o\
	       build/atest/*.a\
	       build/atest/*.d\
	       build/atest/*.o\
	       build/tests/*.d\
	       build/tests/*.o\
	       build/tests/runner

