Target Version:
  v00.00.01

Target Description:
  The first version of this VM is a basically useless infra-structure
  version.  It is capable of running a module that is composed of a
  single primitive.
  
  A module is merely an array of registers that are usually referred
  as the "global registers" (or just globals) of a module. It
  exposes mechanisms to read and write one of its registers.

  A primitive is a procedure implemented as a native C function. For
  this nearly useless version our primitives also receive no
  parameters, but return one (and only one) result.

  We also have an evaluator which is responsible for, given a module,
  executing that module and returning whatever results that module
  returns us.

  With this, we have:
    1) a representation for the values used in the VM (so far, only
       pointers)
    2) a representation for a module;
    3) a way to programmatically build new modules for tests;
    4) a type information registry for each object type;
    5) an object type for primitive procedures;
    6) an evaluator representing the machine itself;


Activity start:  xxxx-xx-xx xx:xx
Activity finish: xxxx-xx-xx xx:xx

Target Tasks:
  x Create a representation for values in the VM (nuvm_value_t).
  x Check encoding/decoding pointer values.
  x Create nuvm_module_builder_t: A Module Builder can add registers and
    build a module using those registers.
  x Create nuvm_module_t: A module is a collection of registers with an
    "entry-point" which indexes a register to be used on load.
  x Check that all registers are properly initialized on a module
    create from a module builder.
  - Create the representation for a type (nuvm_type_info_t).
  - Create a registry for types so we can register each type created
    (represented by a nuvm_type_info_t) with its name.
  - Create nuvm_primitive_t: A Primitive Procedure Object Type that
    holds a reference to a function implemented in C; is called
    without receiving any parameters and returns a single value.
    Primitive procedures are created with access to a pointer to extra
    data it might use. This data is always passed to the native C
    function when called.
  - Check that upon creation a nuvm_primitive_t retains the extra data.
  - Check that upon call a nuvm_primitive_t returns the correct value.
  - Create a nuvm_evaluator_t that represents our evaluator. It must be able to
    run a given module and return its results.
